#!/usr/bin/ruby

=begin 
  Purpose     Make a file of tests for PWAW-UU-verify
  Author      Peter W A Wood
  Version     0.0.1
  Rights      Copyright Â© 2011 Peter W A Wood. All rights reserved.
  License     BSD-3 - https://github.com/dockimbel/Red/blob/master/BSD-3-License.txt
=end

# test data
manual_tests = [                                # string, expected result
  ['a', 0],
  ['a very straightforward string', 0],
  ["\xC0", 1],
  ["12345678901234567890\xC0", 21],
  ["\xC1", 1],
  ["\xF5", 1]
]

auto_tests = %w(
  ###test-value###
  a\ simple\ string###test-value###another\ simple\ string
  0123456789###test-value###0123456789
  string###test-value###st
  string###test-value###string
  string###test-value###nonsense
  abcd###test-value###efghijlk
)
  
# templates
test_header_template = <<END_OF_TEMPLATE
Red/System [
	Title:   "utf-8 verify unit tests"
	Author:  "Peter W A Wood"
	File: 	 %verify-test.reds
	Version: 0.0.1
	Rights:  "Copyright (C) 2011 Peter W A Wood. All rights reserved."
	License: "BSD-3 - https://github.com/dockimbel/Red/blob/master/BSD-3-License.txt"
]

;; This file is generated by make-verfiy-test.rb
;; DO NOT EDIT IT MANUALLY

#include %###uu_path###
#include %###qt_path###

~~~start-file~~~ "verify"

END_OF_TEMPLATE
test_template = <<END_OF_TEMPLATE
  --test-- "verify-###test_num###"
  --assert ###expected### = PWAW-UU-verify "###test_input###"
      
END_OF_TEMPLATE

test_foooter_template = <<END_OF_TEMPLATE
~~~end-file~~~
END_OF_TEMPLATE

# declarations and initialisations
test_num = 0
tests_dir = File.expand_path(File.dirname(__FILE__))
auto_dir = tests_dir + '/Auto'
reds_libs_dir = tests_dir.slice(/\S+\/Red-System-Libs/)
qt_path = IO.read(reds_libs_dir + "/path-to-Red.txt").chomp + 
          'red-system/tests/quick-test/quick-test.reds'
uu_path = tests_dir.sub(/\/[tT]ests\Z/, '') + '/utf-8.reds'
test_header = test_header_template.sub(/###uu_path###/, uu_path).sub(/###qt_path###/, qt_path)
test_footer = test_foooter_template
file_out_path = auto_dir + '/verify-test.reds'

# functions
def to_Red_string(s)
  ns = ''
  s.each_byte {|c|
    if ((c > 126) || (c < 32)) then
      ns += '^(' + c.to_s(16).upcase + ')'
    else
      ns += c.chr
    end
  }
  ns
end

def write_test(file_out, test_template, test_num, expected, input_str)
  test = test_template.sub(/###test_num###/, test_num.to_s).
                       sub(/###expected###/, expected.to_s).
                       sub(/###test_input###/, input_str)
  file_out.write(test)
end

# executable part of the script
puts 'Starting to make verify-test.reds'

# make auto directory if needed
if !File.directory? auto_dir then
  Dir.mkdir auto_dir
end

file_out = File.new(file_out_path, "w")
file_out.write(test_header)

manual_tests.each do |td|
  test_num += 1
  expected = td[1]
  input_str = to_Red_string(td[0])
  write_test(file_out, test_template, test_num, expected, input_str)
end

auto_tests.each do |ts|
  # two-byte chars
  ["\xC2", "\xDF"].each do |fc|
    #valid
    ["\x80", "\xBF"].each do |sc|
      test_num += 1
      expected = 0 
      input_str = to_Red_string(ts.sub(/###test-value###/, to_Red_string(fc + sc)))
      write_test(file_out, test_template, test_num, expected, input_str)
    end
    #invalid
    ["\x7F", "\xC0"].each do |sc|
      test_num += 1
      expected = ts.index('###test-value###') + 1 
      input_str = to_Red_string(ts.sub(/###test-value###/, to_Red_string(fc + sc)))
      write_test(file_out, test_template, test_num, expected, input_str)
    end
  end
  # three-byte chars
  ["\xE0", "\xEF"].each do |fc|
    #valid
    ["\x80", "\xBF"].each do |sc|
      ["\x80", "\xBF"].each do |tc|
        test_num += 1
        expected = 0 
        input_str = to_Red_string(ts.sub(/###test-value###/, to_Red_string(fc + sc + tc)))
        write_test(file_out, test_template, test_num, expected, input_str)
      end
    end
    #invalid
    ["\x7F", "\xC0"].each do |sc|
      ["\x7F", "\xC0"].each do |tc|
        test_num += 1
        expected = ts.index('###test-value###') + 1 
        input_str = to_Red_string(ts.sub(/###test-value###/, to_Red_string(fc + sc + tc)))
        write_test(file_out, test_template, test_num, expected, input_str)
      end
    end
  end
  # four-byte chars
  ["\xF0", "\xF4"].each do |fc|
    #valid
    ["\x80", "\xBF"].each do |sc|
      ["\x80", "\xBF"].each do |tc|
        ["\x80", "\xBF"].each do |c4|
          test_num += 1
          expected = 0 
          input_str = to_Red_string(ts.sub(/###test-value###/, to_Red_string(fc + sc + tc + c4)))
          write_test(file_out, test_template, test_num, expected, input_str)
        end
      end
    end
    #invalid
    ["\x7F", "\xC0"].each do |sc|
      ["\x7F", "\xC0"].each do |tc|
        ["\x7F", "\xC0"].each do |c4|
          test_num += 1
          expected = ts.index('###test-value###') + 1 
          input_str = to_Red_string(ts.sub(/###test-value###/, to_Red_string(fc + sc + tc + c4)))
          write_test(file_out, test_template, test_num, expected, input_str)
        end
      end
    end
  end
end
                       
file_out.write(test_footer)
file_out.close
puts "Finished making verify-test.reds - #{test_num} tests written"